name: Windows Builds

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  CCACHE_DIR: "${{ github.workspace }}/.ccache"
  BASE_BRANCH: main
  

jobs:
  ninja-debug:
    name: Ninja (Debug)
    runs-on: windows-latest
    env:
      PKG_CONFIG_PATH: ""
      SCOOP_CACHE_NAME: scoop3

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Load dependency cache
        id: scoop-cache
        uses: actions/cache@v2
        with:
          path: ~/scoop
          key: ${{ runner.os }}-${{ env.SCOOP_CACHE_NAME }}-${{ hashFiles('**/scoop/') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.SCOOP_CACHE_NAME }}-
        continue-on-error: true
      
      - name: Install scoop
        shell: pwsh
        run: |
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          iwr -useb get.scoop.sh | iex
          scoop bucket add extras
          echo "$Env:USERPROFILE\scoop\shims" >> $Env:GITHUB_PATH

      # If this is ever breaks (it will because we save the environment variable in the cache in a file), use forced installs instead.
      - name: Install dependencies (using scoop)
        shell: pwsh
        run: |
          if (Test-Path "$Env:USERPROFILE\scoop\pkg_config") {$Env:PKG_CONFIG_PATH=Get-Content "$Env:USERPROFILE\scoop\pkg_config"}
          @('meson', 'ninja', 'pkg-config') + (Get-Content misc/scoop/dependencies) | ForEach-Object {scoop install $_}
          echo "PKG_CONFIG_PATH=$Env:PKG_CONFIG_PATH" >> $Env:GITHUB_ENV
          echo $Env:PKG_CONFIG_PATH >> "$Env:USERPROFILE\scoop\pkg_config"

      - name: Prepare compiler cache
        id: prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          
      - name: Load Cache
        id: windows-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key: ${{github.job}}-${{env.BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.BASE_BRANCH}}
        continue-on-error: true
      
      - name: Setup Meson
        run: meson setup builddir
      
      - name: Compilation
        run: |
          cd builddir
          meson compile --verbose
      
      # DLL's don't get copied and cause a test fail. Meson Bug?
      - name: Run Tests
        run: |
          meson test -C builddir -v
        continue-on-error: true
  
  msvc-debug:
    name: MSVC (Debug)
    runs-on: windows-latest
    env:
      PKG_CONFIG_PATH: ""
      SCOOP_CACHE_NAME: scoop4

    steps:
      - name: Fetch Sources
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Load dependency cache
        id: scoop-cache
        uses: actions/cache@v2
        with:
          path: ~/scoop
          key: ${{ runner.os }}-${{ env.SCOOP_CACHE_NAME }}-${{ hashFiles('**/scoop/') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.SCOOP_CACHE_NAME }}-
            ${{ runner.os }}-
            ${{ runner.os }}-
        continue-on-error: true
      
      - name: Install scoop
        shell: pwsh
        run: |
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          iwr -useb get.scoop.sh | iex
          scoop bucket add extras
          echo "$Env:USERPROFILE\scoop\shims" >> $Env:GITHUB_PATH

      # If this is ever breaks (it will because we save the environment variable in the cache in a file), use forced installs instead.
      - name: Install dependencies (using scoop)
        shell: pwsh
        run: |
          if (Test-Path "$Env:USERPROFILE\scoop\pkg_config") {$Env:PKG_CONFIG_PATH=Get-Content "$Env:USERPROFILE\scoop\pkg_config"}
          @('meson', 'ninja', 'pkg-config') + (Get-Content misc/scoop/dependencies) | ForEach-Object {scoop install $_}
          echo "PKG_CONFIG_PATH=$Env:PKG_CONFIG_PATH" >> $Env:GITHUB_ENV
          echo $Env:PKG_CONFIG_PATH >> "$Env:USERPROFILE\scoop\pkg_config"
    
      - name: Prepare compiler cache
        id: prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"

      - name: Load Cache
        id: windows-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key: ${{github.job}}-${{env.BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.BASE_BRANCH}}
        continue-on-error: true

      - name: Prepare MSVC
        uses: bus1/cabuild/action/msdevshell@v1
        with:
          architecture: x64

      # We need to use static linking, because Mesons setup for MSVC is broken and links against .lib files even though it generated .dlls
      - name: Prepare Build
        run: meson setup build -Ddefault_library=static

      - name: Run Build
        run: cd build && meson compile -v

      - name: Run Test Suite
        run: cd build && meson test -v